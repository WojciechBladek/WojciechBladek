{
  "info": {
    "_postman_id": "80a43c87-6ba3-4a9b-9bcb-bde4399570b2",
    "name": "New Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "19343797"
  },
  "item": [
    {
      "name": "Itereate on multiple pages - prepare",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "resBody = pm.response.json();",
              "console.log(resBody);",
              "num_pages = resBody.meta.pagination.pageCount;",
              "console.log(resBody.meta.pagination.pageCount);",
              "",
              "pm.environment.set(\"num_pages\", num_pages);",
              "pm.environment.set(\"page\", 1)"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/vulnerability-indicators",
          "host": ["{{url}}"],
          "path": ["vulnerability-indicators"]
        }
      },
      "response": []
    },
    {
      "name": "Itereate on multiple pages",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let num_pages = pm.environment.get(\"num_pages\");",
              "let page = pm.environment.get(\"page\");",
              "let resBody",
              "resBody = pm.response.json();",
              "const keyToTest = [",
              "    \"value\",",
              "    \"visibleOnComparison\",",
              "    \"presentationType\",",
              "    \"tooltip\",",
              "    \"isHighlighted\",",
              "    \"category\",",
              "    \"description\",",
              "    \"normalizedTip1\",",
              "    \"normalizedTip2\",",
              "    \"normalizedTip3\",",
              "    \"normalizedNameLow\",",
              "    \"normalizedNameMedium\",",
              "    \"normalizedNameHigh\"",
              "]",
              "",
              "page++",
              "pm.environment.set(\"page\", page);",
              "",
              "if (page <= num_pages) {",
              "    postman.setNextRequest(\"Itereate on multiple pages\")",
              "",
              "}",
              "",
              "let object = pm.response.json();",
              "function traverseAndFlatten(currentNode, target, flattenedKey) {",
              "    for (let key in currentNode) {",
              "        if (currentNode.hasOwnProperty(key)) {",
              "            let newKey;",
              "            if (flattenedKey === undefined) {",
              "                newKey = key;",
              "            } else {",
              "                newKey = flattenedKey + '.' + key;",
              "            }",
              "",
              "            let value = currentNode[key];",
              "            if (typeof value === \"object\") {",
              "                traverseAndFlatten(value, target, newKey);",
              "            } else {",
              "                target[newKey] = value;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "function flatten(obj) {",
              "    let flattenedObject = {};",
              "    traverseAndFlatten(obj, flattenedObject);",
              "    return flattenedObject;",
              "}",
              "let flattened = JSON.stringify(flatten(object));",
              "",
              "pm.test('Response to have any keys', () => {",
              "    pm.expect(object).to.have.any.keys('data', 'id', '\"attributes', 'meta', 'pagination');",
              "})",
              "",
              "pm.test('Check the active environment', () => {",
              "    pm.expect(pm.environment.name).to.eql('DEV')",
              "})",
              "",
              "pm.test('Should verify object model', () => {",
              "    const checkIfHasValue = (value) => {",
              "        if (Array.isArray(value)) {",
              "            return pm.expect(value.every((singleValue) => checkIfHasValue(singleValue)));",
              "        } else if (typeof value === 'object') {",
              "            return pm.expect(Object.keys(value).every((key) => checkIfHasValue(value[key])));",
              "        } else {",
              "            return pm.expect(!!value) || pm.expect(value === 0);",
              "        }",
              "    };",
              "    checkIfHasValue(flatten(object));",
              "})",
              "",
              "",
              "pm.test('Should verify status code', () => {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Response time is less than 500ms', () => {",
              "    pm.expect(pm.response.responseTime).to.lessThan(500);",
              "})",
              "",
              "pm.test('Test data type of pagiantion', () => {",
              "    let obj = object.meta.pagination",
              "    const keysToTest = ['page', 'pageSize', 'pageCount', 'total']",
              "    pm.expect(obj).to.have.keys('page', 'pageSize', 'pageCount', 'total').and.be.an('object')",
              "    keysToTest.forEach(element => {",
              "        pm.expect(element in obj);",
              "        pm.expect(obj[element]).to.be.an('number')",
              "    })",
              "})",
              "",
              "",
              "pm.environment.set(\"vulIndicatorsCount\", object.data.length);",
              "",
              "",
              "pm.test('Should verify vulIndicatorsCount count', () => {",
              "    let vulIndicatorsCount = []",
              "    object.data.forEach(element => vulIndicatorsCount.push(element));",
              "    vulIndicatorsCount.forEach(index => {",
              "        pm.environment.set('vulIndicatorsId', index.id)",
              "    })",
              "    if (vulIndicatorsCount.length === pm.environment.get('vulIndicatorsCount')) {",
              "        pm.expect(vulIndicatorsCount.length).to.eql(pm.environment.get('vulIndicatorsCount'))",
              "    } else { console.log(`False count = ${pm.environment.get('vulIndicatorsCount')}`) }",
              "})",
              "",
              "pm.test('Should verify keys in indicator', () => {",
              "    let value;",
              "    object.data.forEach(element => {",
              "        value = element.attributes",
              "        pm.expect(value).to.have.keys(keyToTest)",
              "",
              "    })",
              "})",
              "",
              "pm.test('Should verify presentationType', () => {",
              "    let value;",
              "    object.data.forEach(element => {",
              "        value = element.attributes",
              "        pm.expect(value.presentationType).to.be.oneOf(['Percentage Bar', 'Number & People', 'Number', 'Scale', 'Compilation', 'NA', 'Normalized Scale']);",
              "    })",
              "",
              "})",
              "pm.test('Should verify type of boolean', () => {",
              "    let obj = object.data",
              "    let keysToTest = ['isHighlighted', 'visibleOnComparison']",
              "    keysToTest.forEach(element => {",
              "        obj.forEach(index => {",
              "            let obj2;",
              "            obj2 = index.attributes[element]",
              "            pm.expect(obj2).to.be.an('boolean')",
              "            pm.expect(obj2).to.be.oneOf([false, true])",
              "",
              "        });",
              "    })",
              "});",
              "pm.test('Should verify type of string', () => {",
              "    let obj = object.data",
              "    let keysToTest = ['value', 'presentationType', 'tooltip']",
              "    keysToTest.forEach(element => {",
              "        obj.forEach(index => {",
              "            let obj2;",
              "            obj2 = index.attributes[element]",
              "            if (obj2) {",
              "                pm.expect(obj2).to.be.an('string')",
              "            }",
              "            else {",
              "                pm.expect(obj2).to.eql(null)",
              "            }",
              "        });",
              "    })",
              "});",
              "pm.test('Should verify type of number', () => {",
              "    let obj = object.data",
              "    let keysToTest = ['id']",
              "    keysToTest.forEach(element => {",
              "        obj.forEach(index => {",
              "            let obj2;",
              "            obj2 = index[element]",
              "            pm.expect(obj2).to.be.an('number')",
              "        });",
              "    })",
              "});",
              "pm.test(\"Content-Type header is present\", () => {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});",
              "pm.test(\"X-Powered-By header is present\", () => {",
              "    pm.response.to.have.header(\"X-Powered-By\");",
              "});",
              "pm.test(\"Content-Security-Policy header is present\", () => {",
              "    pm.response.to.have.header(\"Content-Security-Policy\");",
              "});",
              "",
              "pm.test(\"Content-Type header is application/json\", () => {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/vulnerability-indicators?pagination[page]={{page}}",
          "host": ["{{url}}"],
          "path": ["vulnerability-indicators"],
          "query": [
            {
              "key": "pagination[page]",
              "value": "{{page}}"
            }
          ]
        }
      },
      "response": []
    }
  ]
}
